{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","medium_cover_image","title","src","alt","className","MovieGenre","genre","Movie","id","description_full","genres","map","index","key","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","movies","movie","console","log","_getMovies","a","_callApi","setState","fetch","then","data","json","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4UAgCA,IAAIA,EAAc,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,mBAAoBC,EAAY,EAAZA,MACvC,OACE,yBACEC,IAAKF,EACLG,IAAKF,EAAQ,sBACbA,MAAOA,EACPG,UAAU,mBAKZC,EAAa,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAClB,OAAO,0BAAMF,UAAU,gBAAgBE,IAmB1BC,EA1Df,YAA4E,EAA3DC,GAA4D,IAAxDP,EAAuD,EAAvDA,MAAOD,EAAgD,EAAhDA,mBAAoBS,EAA4B,EAA5BA,iBAAkBC,EAAU,EAAVA,OAChE,OACE,yBAAKN,UAAU,SACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CAAaJ,mBAAoBA,EAAoBC,MAAOA,KAE9D,yBAAKG,UAAU,iBACb,4BAAKH,GACL,yBAAKG,UAAU,gBACZM,EAAOC,KAAI,SAACL,EAAOM,GAAR,OACV,kBAAC,EAAD,CAAYN,MAAOA,EAAOO,IAAKD,QAGnC,yBAAKR,UAAU,mBACb,kBAAC,IAAD,CACEU,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBC6BLC,E,4MA9CbC,MAAQ,G,EASRC,cAAgB,WAYd,OAXe,EAAKD,MAAME,OAAOX,KAAI,SAACY,GAGpC,OAFAC,QAAQC,IAAIF,GAEL,kBAAC,EAAD,CACLV,IAAKU,EAAMf,GACXP,MAAOsB,EAAMtB,MACbD,mBAAoBuB,EAAMvB,mBAC1BU,OAAQa,EAAMb,OACdD,iBAAkBc,EAAMd,uB,EAM9BiB,W,sBAAa,4BAAAC,EAAA,sEACU,EAAKC,WADf,OACLN,EADK,OAEX,EAAKO,SAAS,CACZP,WAHS,2C,EAObM,SAAW,WACT,OAAOE,MAAM,yDACZC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAE,GAAI,OAAIA,EAAKD,KAAKV,UACvBY,OAAM,SAAAC,GAAG,OAAIX,QAAQC,IAAIU,O,gHA/B1BC,KAAKV,aACLF,QAAQC,IAAI,W,+BAkCZ,OACE,yBAAKrB,UAAU,OACZgC,KAAKhB,MAAME,OAASc,KAAKf,gBAAkB,e,GA3ClCgB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.00bedade.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport LinesEllipsis from \"react-lines-ellipsis\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({ id, title, medium_cover_image, description_full, genres }) {\r\n  return (\r\n    <div className=\"Movie\">\r\n      <div className=\"Movie__Column\">\r\n        <MoviePoster medium_cover_image={medium_cover_image} title={title} />\r\n      </div>\r\n      <div className=\"Movie__Column\">\r\n        <h1>{title}</h1>\r\n        <div className=\"Movie__Gener\">\r\n          {genres.map((genre, index) => (\r\n            <MovieGenre genre={genre} key={index} />\r\n          ))}\r\n        </div>\r\n        <div className=\"Movie__Synopsis\">\r\n          <LinesEllipsis\r\n            text={description_full}\r\n            maxLine='3'\r\n            ellipsis='...'\r\n            trimRight\r\n            basedOn='letters'\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nvar MoviePoster = ({ medium_cover_image, title }) => {\r\n  return (\r\n    <img\r\n      src={medium_cover_image}\r\n      alt={title + \" 이미지\"}\r\n      title={title}\r\n      className=\"Movie__Poster\"\r\n    />\r\n  );\r\n};\r\n\r\nvar MovieGenre = ({ genre }) => {\r\n  return <span className=\"Movie__Genre\">{genre}</span>;\r\n};\r\n\r\nMovie.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  medium_cover_image: PropTypes.string.isRequired,\r\n  description_full: PropTypes.string,\r\n  genres: PropTypes.array,\r\n};\r\n\r\nMoviePoster.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  medium_cover_image: PropTypes.string.isRequired,\r\n};\r\n\r\nMovieGenre.propTypes = {\r\n  genre: PropTypes.string,\r\n};\r\n\r\nexport default Movie;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Movie from \"./Movie\";\n\n\nclass App extends Component {\n\n  state = {};\n  componentWillMount() {}\n\n  componentDidMount() {\n    this._getMovies();\n    console.log('hello')\n    \n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie) => {\n      console.log(movie);\n      \n      return <Movie\n        key={movie.id} \n        title={movie.title} \n        medium_cover_image={movie.medium_cover_image} \n        genres={movie.genres}\n        description_full={movie.description_full}\n      />;\n    })\n    return movies;\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {   \n    return fetch('https://yts.mx/api/v2/list_movies.json?sort_by=rating')\n    .then(data => data.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}